<div class="kanban-header flex justify-between w-[90%] m-auto pb-7">
  <h1 class="text-3xl font-bold">CICCC Board</h1>
  <button
    id="new-col-btn"
    class="bg-white cursor-pointer hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow"
    >+ Add Column</button
  >
</div>
<div
  id="container"
  class="flex flex-col md:flex-row m-auto overflow-hidden rounded-lg w-[90%] flex-wrap"
</div>

<!-------------------- Modal -------------------->
<dialog
  id="task-modal"
  class="bg-white p-6 rounded-md shadow-lg w-full max-w-md fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
>
  <h2 class="text-lg font-bold mb-2">Add Task</h2>
  <form id="task-form" class="flex flex-col gap-2">
    <input
      id="task-title"
      type="text"
      placeholder="Title"
      required
      class="border p-2 rounded"
    />
    <input
      id="task-desc"
      placeholder="Description"
      required
      class="border p-2 rounded"
    />
    <button
      type="submit"
      id="submit-btn"
      class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 cursor-pointer"
      >Add Task</button
    >
    <button type="button" id="close-modal" class="text-red-500 cursor-pointer">Cancel</button>
  </form>
</dialog>

<script>
  interface Task {
    id: string;
    title: string;
    description: string;
    column: string;
  }

  class Kanban {
    target: HTMLElement | null;
    modal: HTMLDialogElement | null;
    form: HTMLFormElement | null;
    titleInput: HTMLInputElement | null;
    descInput: HTMLInputElement | null;
    currentColumn: HTMLElement | null;
    currentTask: HTMLElement | null;
    columns: string[];

    tasks: Task[];

    constructor() {
      this.target = document.querySelector("#container");
      this.modal = document.getElementById("task-modal") as HTMLDialogElement;
      this.form = document.getElementById("task-form") as HTMLFormElement;
      this.titleInput = document.getElementById(
        "task-title"
      ) as HTMLInputElement;
      this.descInput = document.getElementById("task-desc") as HTMLInputElement;
      this.currentColumn = null;
      this.currentTask = null;
      this.tasks = [];
      this.columns = [];

      this.columns = ["To Do", "In Progress", "Done"];
      this.loadColumnsFromLocalStorage();
      this.renderColumns();

      const addColBtn = document.querySelector(
        "#new-col-btn"
      ) as HTMLButtonElement;
      addColBtn.addEventListener("click", () => {
        this.addColumn("New Column");
        this.renderColumns();
        console.log(this.columns);
      });

      this.setupModal();
    }

    renderColumns() {
      if (this.target) {
        this.target.innerHTML = "";
        this.columns.forEach((columnName, index) => {
          const div = document.createElement("div");
          div.classList.add("kanban-column", "md:w-1/3", "w-full");
          div.setAttribute("data-status", columnName);

          const headerContainer = document.createElement("div");
          const colors = ["bg-purple-500", "bg-green-400", "bg-blue-700"];

          if (index % 2 === 0) {
            div.classList.add("bg-gray-100");
          } else {
            div.classList.add("bg-gray-200");
          }

          function fisherYatesShuffle(array: string[]): string {
            for (let i = array.length - 1; i > 0; i--) {
              const j = Math.floor(Math.random() * (i + 1));
              [array[i], array[j]] = [array[j], array[i]];
            }
            return array[0];
          }

          headerContainer.classList.add(
            "flex",
            "items-center",
            "justify-between",
            "p-4"
          );
          headerContainer.classList.add(`${fisherYatesShuffle(colors)}`);

          const header = document.createElement("h2");
          header.classList.add(
            "text-xl",
            "font-bold",
            "text-white",
            "whitespace-nowrap"
          );
          header.textContent = columnName;
          headerContainer.appendChild(header);

          const buttonContainer = document.createElement("div");
          buttonContainer.classList.add("button-container", "flex", "gap-2");

          const editButton = document.createElement("button");
          editButton.classList.add(
            "button",
            "edit-button",
            "bg-white",
            "rounded-full",
            "p-1",
            "cursor-pointer"
          );
          editButton.innerHTML = `
        <svg class="w-[21px] h-[21px] text-yellow-500 aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.779 17.779 4.36 19.918 6.5 13.5m4.279 4.279 8.364-8.643a3.027 3.027 0 0 0-2.14-5.165 3.03 3.03 0 0 0-2.14.886L6.5 13.5m4.279 4.279L6.499 13.5m2.14 2.14 6.213-6.504M12.75 7.04 17 11.28"/>
</svg>
      `;
          editButton.addEventListener("click", () =>
            this.enableEditColumnName(index)
          );

          const deleteButton = document.createElement("button");
          deleteButton.classList.add(
            "button",
            "delete-button",
            "bg-white",
            "rounded-full",
            "p-1",
            "cursor-pointer"
          );
          deleteButton.innerHTML = `
          <svg class="w-[21px] h-[21px] text-red-500 dark:text-red" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z"/>
  </svg>
          `;
          deleteButton.addEventListener("click", () =>
            this.deleteColumn(index)
          );

          buttonContainer.appendChild(deleteButton);
          buttonContainer.appendChild(editButton);

          headerContainer.appendChild(buttonContainer);

          div.appendChild(headerContainer);

          const addButton = document.createElement("button");
          addButton.classList.add(
            "add-task-btn",
            "bg-white",
            "border",
            "border-gray-300",
            "px-1",
            "mx-auto",
            "mb-5",
            "block",
            "py-1",
            "rounded-full",
            "hover:scale-125",
            "ease-in-out",
            "duration-300",
            "cursor-pointer"
          );
          addButton.innerHTML = `<svg class="w-5 h-5 text-gray-800 aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="none" viewBox="0 0 24 24">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14m-7 7V5"/>
        </svg>
      `;
          addButton.addEventListener("click", () => this.openModal(div));

          const taskList = document.createElement("div");
          taskList.setAttribute("ondrop", "drop(event)");
          taskList.setAttribute("ondragover", "dragOver (event)");
          taskList.classList.add("task-list", "mt-4", "min-h-30", "p-4");
          div.appendChild(taskList);
          div.appendChild(addButton);

          this.target?.appendChild(div);
        });
      }
      this.renderTasks();
    }

    getColumnStatus(column: HTMLElement): string | null {
      return column.getAttribute("data-status");
    }

    addColumn(name: string) {
      this.columns.push(name);
      this.saveColumnsToLocalStorage();
    }

    enableEditColumnName(index: number) {
      const columnDiv = this.target?.children[index];
      const header = columnDiv?.querySelector("h2");

      if (!header) return;
      const currentName = header.textContent;

      const input = document.createElement("input");
      input.value = currentName || "";
      input.classList.add("px-2", "py-1", "rounded", "border");

      header.innerHTML = "";
      header.appendChild(input);

      input.focus();

      input.addEventListener("blur", () =>
        this.saveColumnName(index, input.value)
      );
      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          this.saveColumnName(index, input.value);
        }
      });
    }

    saveColumnName(index: number, newName: string) {
      if (newName.trim() !== "") {
        const oldName = this.columns[index];

        this.columns[index] = newName.trim();

        this.tasks.forEach((task) => {
          if (task.column === oldName) {
            task.column = newName.trim();
          }
        });

        this.saveColumnsToLocalStorage();
        this.saveTasksToLocalStorage();
        this.renderColumns();
      } else {
        this.renderColumns();
      }
    }

    deleteColumn(index: number) {
      const isConfirmed = confirm("Delete Column?");
      if (!isConfirmed) return;

      const columnName = this.columns[index];

      this.columns.splice(index, 1);

      this.tasks = this.tasks.filter((task) => task.column !== columnName);

      this.saveColumnsToLocalStorage();
      this.saveTasksToLocalStorage();

      this.renderColumns();
    }

    saveColumnsToLocalStorage() {
      localStorage.setItem("kanban-columns", JSON.stringify(this.columns));
    }

    loadColumnsFromLocalStorage() {
      const storedColumns = localStorage.getItem("kanban-columns");
      if (storedColumns) {
        this.columns = JSON.parse(storedColumns);
      }
    }

    openModal(column: HTMLElement, taskToEdit?: HTMLElement) {
      this.currentColumn = column;
      if (taskToEdit) {
        this.currentTask = taskToEdit;
        const title = taskToEdit.querySelector(".task-title") as HTMLElement;
        const desc = taskToEdit.querySelector(".task-desc") as HTMLElement;

        if (title && desc) {
          this.titleInput!.value = title.textContent || "";
          this.descInput!.value = desc.textContent || "";
        }

        const submitBtn = document.getElementById(
          "submit-btn"
        ) as HTMLButtonElement;
        if (submitBtn) {
          submitBtn.textContent = "Update Task";
        }
      } else {
        this.currentTask = null;
        this.titleInput!.value = "";
        this.descInput!.value = "";

        const submitBtn = document.getElementById(
          "submit-btn"
        ) as HTMLButtonElement;
        if (submitBtn) {
          submitBtn.textContent = "Add Task";
        }
      }

      if (this.modal) {
        this.modal.showModal();
      }
    }

    setupModal() {
      const closeModalBtn = document.getElementById(
        "close-modal"
      ) as HTMLButtonElement;

      if (this.form) {
        this.form.addEventListener("submit", (e) => {
          e.preventDefault();
          const title = this.titleInput?.value.trim();
          const description = this.descInput?.value.trim();

          if (title && description && this.currentColumn) {
            if (this.currentTask) {
              this.editTask(title, description);
            } else {
              this.addTask(title, description);
            }
            this.modal?.close();
            this.form?.reset();
          }
        });
      }

      if (closeModalBtn) {
        closeModalBtn.addEventListener("click", () => {
          this.modal?.close();
        });
      }
    }

    addTask(title: string, description: string) {
      if (!this.currentColumn) return;

      const columnName = this.currentColumn.querySelector("h2")?.textContent;

      if (!columnName) return;

      const taskId = `task-${Date.now()}`;

      const task = {
        id: taskId,
        title,
        description,
        column: columnName,
      };
      this.tasks.push(task);

      const taskElement = document.createElement("div");
      taskElement.setAttribute("data-id", taskId);
      taskElement.setAttribute("id", task.id);
      taskElement.setAttribute("column", columnName);
      taskElement.setAttribute("draggable", "true");
      taskElement.setAttribute("ondragstart", "drag(event)");
      taskElement.classList.add(
        "bg-white",
        "rounded-lg",
        "p-3",
        "shadow-md",
        "mb-3",
        "taskElement",
        "hover:scale-105",
        "ease-in-out",
        "duration-300"
      );
      taskElement.innerHTML = `
    <h3 class="task-title font-semibold text-lg">${title}</h3>
    <p class="task-desc text-sm text-gray-600">${description}</p>
    <button class=" mt-2 delete-btn" style="font-size: 14px;">
      
      <svg class="w-[21px] h-[21px] text-red-500 dark:text-red" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z"/>
  </svg>


      
      </button>
    <button class="text-yellow-500 mt-2 edit-btn" style="font-size: 14px;">
      
        <svg class="w-[21px] h-[21px] text-gray-800 dark:text-black" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M10.779 17.779 4.36 19.918 6.5 13.5m4.279 4.279 8.364-8.643a3.027 3.027 0 0 0-2.14-5.165 3.03 3.03 0 0 0-2.14.886L6.5 13.5m4.279 4.279L6.499 13.5m2.14 2.14 6.213-6.504M12.75 7.04 17 11.28"/>
</svg>


      
      </button>
  `;

      const deleteButton = taskElement.querySelector(".delete-btn");
      if (deleteButton) {
        deleteButton.addEventListener("click", () => this.deleteTask(taskId));
      }

      const editButton = taskElement.querySelector(".edit-btn");
      if (editButton) {
        editButton.addEventListener("click", () => {
          this.openModal(this.currentColumn!, taskElement);
        });
      }

      const taskList = this.currentColumn.querySelector(".task-list");
      if (taskList) {
        taskList.prepend(taskElement);
      }

      this.saveTasksToLocalStorage();
    }

    deleteTask(id: string) {
      const isConfirmed = confirm("Are you sure you want to delete this task?");
      if (!isConfirmed) return;

      const taskIndex = this.tasks.findIndex((task) => task.id === id);
      if (taskIndex !== -1) {
        this.tasks.splice(taskIndex, 1);

        const taskElement = this.target?.querySelector(`[data-id="${id}"]`);
        if (taskElement) {
          taskElement.remove();
        }

        this.saveTasksToLocalStorage();
      }
    }

    editTask(title: string, description: string) {
      if (!this.currentTask) return;

      const titleElement = this.currentTask.querySelector(
        ".task-title"
      ) as HTMLElement;
      const descElement = this.currentTask.querySelector(
        ".task-desc"
      ) as HTMLElement;

      if (titleElement && descElement) {
        titleElement.textContent = title;
        descElement.textContent = description;
      }

      const taskId = this.currentTask.getAttribute("data-id");
      if (!taskId) return;

      const taskIndex = this.tasks.findIndex((task) => task.id === taskId);
      if (taskIndex !== -1) {
        this.tasks[taskIndex].title = title;
        this.tasks[taskIndex].description = description;
      }

      this.saveTasksToLocalStorage();
    }

    saveTasksToLocalStorage() {
      localStorage.setItem("kanban-tasks", JSON.stringify(this.tasks));
    }

    loadTasksFromLocalStorage() {
      const storedTasks = localStorage.getItem("kanban-tasks");
      if (storedTasks && this.target) {
        this.tasks = JSON.parse(storedTasks);
        this.renderTasks();
      }
    }

    renderTasks() {
      this.tasks.forEach((task) => {
        const column = this.target?.querySelector(
          `[data-status="${task.column}"]`
        ) as HTMLElement;

        if (column) {
          const taskElement = document.createElement("div");
          taskElement.classList.add(
            "bg-white",
            "rounded-lg",
            "p-3",
            "shadow-lg",
            "mb-3",
            "taskElement",
            "inset-shadow-2xs",
            "hover:scale-105",
            "ease-in-out",
            "duration-300"
          );
          taskElement.setAttribute("data-id", task.id);
          taskElement.setAttribute("id", task.id);
          taskElement.innerHTML = `
        <h3 class="task-title font-semibold text-lg">${task.title}</h3>
        <p class="task-desc text-sm text-gray-600">${task.description}</p>
        <button class="text-red-500 mt-2 delete-btn" style="font-size: 14px;">
           <svg class="w-[21px] h-[21px] text-red-400 dark:text-red" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z"/>
  </svg>

          </button>
        <button class="text-yellow-500 mt-2 edit-btn" style="font-size: 14px;">
             <svg class="w-[21px] h-[21px] text-gray-800 dark:text-black" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M10.779 17.779 4.36 19.918 6.5 13.5m4.279 4.279 8.364-8.643a3.027 3.027 0 0 0-2.14-5.165 3.03 3.03 0 0 0-2.14.886L6.5 13.5m4.279 4.279L6.499 13.5m2.14 2.14 6.213-6.504M12.75 7.04 17 11.28"/>
</svg>


          </button>
      `;

          const deleteButton = taskElement.querySelector(".delete-btn");
          if (deleteButton) {
            deleteButton.addEventListener("click", () =>
              this.deleteTask(task.id)
            );
          }

          const editButton = taskElement.querySelector(".edit-btn");
          if (editButton) {
            editButton.addEventListener("click", () =>
              this.openModal(column, taskElement)
            );
          }

          const taskList = column.querySelector(".task-list");
          if (taskList) {
            taskList.prepend(taskElement);
          }
        }
      });
    }
  }

  const kanban = new Kanban();
  kanban.renderColumns();
  kanban.loadTasksFromLocalStorage();
</script>

<script is:inline>
  function drag(ev) {
    ev.dataTransfer.setData("text/plain", ev.target.id);

    draggedItem = ev.target;
    dx = ev.clientX - draggedItem.getBoundingClientRect().x;
    dy = ev.clientY - draggedItem.getBoundingClientRect().y;
  }

  function dragOver(ev) {
    ev.preventDefault();

    // draggedItem.style.display = "none";
    draggedItem.style.left = ev.clientX - dx;
    draggedItem.style.top = ev.clientY - dy;

    draggedItem.style.display = "block";
  }

  function drop(ev) {
    ev.preventDefault();

    const draggedCard = document.getElementById(
      ev.dataTransfer.getData("text")
    );
    const targetCard = ev.target.closest(".taskElement");
    const column = ev.target.closest(".task-list");

    if (!draggedCard) return;

    if (!targetCard) {
      draggedItem.style.position = "static";
      draggedItem.style.display = "block";
    }

    if (targetCard) {
      const rect = targetCard.getBoundingClientRect();
      const mouseY = ev.clientY;

      if (mouseY < rect.top + rect.height / 2) {
        targetCard.insertAdjacentElement("beforebegin", draggedCard);
        draggedItem.style.left = ev.clientX - dx;
        draggedItem.style.top = ev.clientY - dy;
      } else {
        targetCard.insertAdjacentElement("afterend", draggedCard);
        draggedItem.style.left = ev.clientX - dx;
        draggedItem.style.top = ev.clientY - dy;
      }
    } else if (column) {
      column.appendChild(draggedCard);
      draggedItem.style.position = "static";
    }

    let tasks = JSON.parse(localStorage.getItem("kanban-tasks")) || [];
    const taskId = draggedCard.id;
    const status =
      draggedItem.parentElement.parentElement.getAttribute("data-status");

    tasks = tasks.map((task) =>
      task.id === taskId
        ? {
            ...task,
            column: status,
          }
        : task
    );

    localStorage.setItem("kanban-tasks", JSON.stringify(tasks));

    draggedItem = undefined;
    dx = dy = 0;
  }
  document.addEventListener("DOMContentLoaded", () => {
    setDraggableForTasks();
    observeDOMChanges();
  });

  function setDraggableForTasks() {
    document.querySelectorAll(".taskElement").forEach((task) => {
      if (!task.hasAttribute("draggable")) {
        task.setAttribute("draggable", "true");
        task.addEventListener("dragstart", drag);
      }
    });
  }

  function observeDOMChanges() {
    const observer = new MutationObserver(() => {
      setDraggableForTasks();
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });
  }
</script>
