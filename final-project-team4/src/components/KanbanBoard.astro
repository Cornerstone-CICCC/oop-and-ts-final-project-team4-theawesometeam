<div id="container" class="flex gap-4 p-4 w-full"></div>

<!-------------------- Modal -------------------->
<dialog
  id="task-modal"
  class="bg-white p-6 rounded-md shadow-lg w-full max-w-md fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
>
  <h2 class="text-lg font-bold mb-2">Add Task</h2>
  <form id="task-form" class="flex flex-col gap-2">
    <input
      id="task-title"
      type="text"
      placeholder="Title"
      required
      class="border p-2 rounded"
    />
    <input
      id="task-desc"
      placeholder="Description"
      required
      class="border p-2 rounded"
    />
    <button
      type="submit"
      id="submit-btn"
      class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
      >Add Task</button
    >
    <button type="button" id="close-modal" class="text-red-500">Cancel</button>
  </form>
</dialog>

<script>
  interface Task {
    id: string;
    title: string;
    description: string;
    column: string;
  }

  class Kanban {
    target: HTMLElement | null;
    modal: HTMLDialogElement | null;
    form: HTMLFormElement | null;
    titleInput: HTMLInputElement | null;
    descInput: HTMLInputElement | null;
    currentColumn: HTMLElement | null;
    currentTask: HTMLElement | null;

    tasks: Task[];

    constructor() {
      this.target = document.querySelector("#container");
      this.modal = document.getElementById("task-modal") as HTMLDialogElement;
      this.form = document.getElementById("task-form") as HTMLFormElement;
      this.titleInput = document.getElementById(
        "task-title"
      ) as HTMLInputElement;
      this.descInput = document.getElementById("task-desc") as HTMLInputElement;
      this.currentColumn = null;
      this.currentTask = null;
      this.tasks = [];

      if (this.target) {
        const columnNames = ["To Do", "In Progress", "Done"];
        columnNames.forEach((columnName) => {
          const div = document.createElement("div");
          div.classList.add(
            "kanban-column",
            "bg-gray-200",
            "p-4",
            "rounded-md",
            "w-1/3"
          );
          div.setAttribute("data-status", columnName);

          const headerContainer = document.createElement("div");
          headerContainer.classList.add(
            "flex",
            "items-center",
            "justify-between"
          );

          const header = document.createElement("h2");
          header.classList.add("text-xl", "font-bold");
          header.textContent = columnName;
          headerContainer.appendChild(header);

          const addButton = document.createElement("button");
          addButton.classList.add(
            "bg-blue-500",
            "text-white",
            "px-4",
            "py-2",
            "rounded",
            "hover:bg-blue-600"
          );
          addButton.textContent = "Add Task";
          addButton.addEventListener("click", () => this.openModal(div));
          headerContainer.appendChild(addButton);

          div.appendChild(headerContainer);

          const taskList = document.createElement("div");
          taskList.classList.add("task-list", "mt-4");
          div.appendChild(taskList);

          this.target?.appendChild(div);
        });
      }

      this.setupModal();
    }

    getColumnStatus(column: HTMLElement): string | null {
      return column.getAttribute("data-status");
    }

    openModal(column: HTMLElement, taskToEdit?: HTMLElement) {
      this.currentColumn = column;
      if (taskToEdit) {
        this.currentTask = taskToEdit;
        const title = taskToEdit.querySelector(".task-title") as HTMLElement;
        const desc = taskToEdit.querySelector(".task-desc") as HTMLElement;

        if (title && desc) {
          this.titleInput!.value = title.textContent || "";
          this.descInput!.value = desc.textContent || "";
        }

        const submitBtn = document.getElementById(
          "submit-btn"
        ) as HTMLButtonElement;
        if (submitBtn) {
          submitBtn.textContent = "Update Task";
        }
      } else {
        this.currentTask = null;
        this.titleInput!.value = "";
        this.descInput!.value = "";

        const submitBtn = document.getElementById(
          "submit-btn"
        ) as HTMLButtonElement;
        if (submitBtn) {
          submitBtn.textContent = "Add Task";
        }
      }

      if (this.modal) {
        this.modal.showModal();
      }
    }

    setupModal() {
      const closeModalBtn = document.getElementById(
        "close-modal"
      ) as HTMLButtonElement;

      if (this.form) {
        this.form.addEventListener("submit", (e) => {
          e.preventDefault();
          const title = this.titleInput?.value.trim();
          const description = this.descInput?.value.trim();

          if (title && description && this.currentColumn) {
            if (this.currentTask) {
              this.editTask(title, description);
            } else {
              this.addTask(title, description);
            }
            this.modal?.close();
            this.form?.reset();
          }
        });
      }

      if (closeModalBtn) {
        closeModalBtn.addEventListener("click", () => {
          this.modal?.close();
        });
      }
    }

    addTask(title: string, description: string) {
      if (!this.currentColumn) return;

      const columnName = this.currentColumn.querySelector("h2")?.textContent;

      if (!columnName) return;

      const taskId = `task-${Date.now()}`;

      const task = {
        id: taskId,
        title,
        description,
        column: columnName,
      };
      this.tasks.push(task);

      const taskElement = document.createElement("div");
      taskElement.setAttribute("data-id", taskId);
      taskElement.classList.add(
        "bg-white",
        "rounded-lg",
        "p-3",
        "shadow-md",
        "mb-3"
      );
      taskElement.innerHTML = `
    <h3 class="task-title font-semibold text-lg">${title}</h3>
    <p class="task-desc text-sm text-gray-600">${description}</p>
    <button class="text-red-500 mt-2 delete-btn" style="font-size: 14px;">Delete</button>
    <button class="text-yellow-500 mt-2 edit-btn" style="font-size: 14px;">Edit</button>
  `;

      const deleteButton = taskElement.querySelector(".delete-btn");
      if (deleteButton) {
        deleteButton.addEventListener("click", () => this.deleteTask(taskId));
      }

      const editButton = taskElement.querySelector(".edit-btn");
      if (editButton) {
        editButton.addEventListener("click", () => {
          this.openModal(this.currentColumn!, taskElement);
        });
      }

      const taskList = this.currentColumn.querySelector(".task-list");
      if (taskList) {
        taskList.appendChild(taskElement);
      }

      this.saveTasksToLocalStorage();
    }

    deleteTask(id: string) {
      const isConfirmed = confirm("Are you sure you want to delete this task?");
      if (!isConfirmed) return;

      const taskIndex = this.tasks.findIndex((task) => task.id === id);
      if (taskIndex !== -1) {
        this.tasks.splice(taskIndex, 1);

        const taskElement = this.target?.querySelector(`[data-id="${id}"]`);
        if (taskElement) {
          taskElement.remove();
        }

        this.saveTasksToLocalStorage();
      }
    }

    editTask(title: string, description: string) {
      if (!this.currentTask) return;

      const titleElement = this.currentTask.querySelector(
        ".task-title"
      ) as HTMLElement;
      const descElement = this.currentTask.querySelector(
        ".task-desc"
      ) as HTMLElement;

      if (titleElement && descElement) {
        titleElement.textContent = title;
        descElement.textContent = description;
      }

      const taskId = this.currentTask.getAttribute("data-id");
      if (!taskId) return;

      const taskIndex = this.tasks.findIndex((task) => task.id === taskId);
      if (taskIndex !== -1) {
        this.tasks[taskIndex].title = title;
        this.tasks[taskIndex].description = description;
      }

      this.saveTasksToLocalStorage();
    }

    saveTasksToLocalStorage() {
      localStorage.setItem("kanban-tasks", JSON.stringify(this.tasks));
    }

    loadTasksFromLocalStorage() {
      const storedTasks = localStorage.getItem("kanban-tasks");
      if (storedTasks && this.target) {
        this.tasks = JSON.parse(storedTasks);
        this.renderTasks();
      }
    }

    renderTasks() {
      this.tasks.forEach((task) => {
        const column = this.target?.querySelector(
          `[data-status="${task.column}"]`
        ) as HTMLElement;

        if (column) {
          const taskElement = document.createElement("div");
          taskElement.classList.add(
            "bg-white",
            "rounded-lg",
            "p-3",
            "shadow-md",
            "mb-3"
          );
          taskElement.innerHTML = `
        <h3 class="task-title font-semibold text-lg">${task.title}</h3>
        <p class="task-desc text-sm text-gray-600">${task.description}</p>
        <button class="text-red-500 mt-2 delete-btn" style="font-size: 14px;">Delete</button>
        <button class="text-yellow-500 mt-2 edit-btn" style="font-size: 14px;">Edit</button>
      `;

          const deleteButton = taskElement.querySelector(".delete-btn");
          if (deleteButton) {
            deleteButton.addEventListener("click", () =>
              this.deleteTask(task.id)
            );
          }

          const editButton = taskElement.querySelector(".edit-btn");
          if (editButton) {
            editButton.addEventListener("click", () =>
              this.openModal(column, taskElement)
            );
          }

          const taskList = column.querySelector(".task-list");
          if (taskList) {
            taskList.appendChild(taskElement);
          }
        }
      });
    }
  }

  const kanban = new Kanban();
  kanban.loadTasksFromLocalStorage();
</script>
