---
import '../styles/global.css'
---
<div class="search-container w-full h-full min-h-[20vh] flex justify-center items-center p-8"> 
    <div class="search-bar-box shadow-[0_0_1px] rounded-[10px] overflow-visible h-[28px] relative">
        <form>
            <input type="text" name="search" placeholder="Search..." autocomplete="off" class="w-[60vw] h-[28px] rounded-[10px] shadow-[0_0_1px] outline-none p-1">
        </form>
        <div class="suggestion z-[10] bg-white shadow-[0_0_1px] hidden">
            <ul></ul>
        </div>
    </div>  
</div>

<script>
    const input = document.querySelector('input') as HTMLInputElement
    const suggestion = document.querySelector('.suggestion') as HTMLDivElement
    const suggestionList = document.querySelector('.suggestion ul') as HTMLUListElement
    const searchBarBox = document.querySelector('.search-bar-box') as HTMLDivElement

    // ------------------- function for suggestion to appear and disappear ------------------------

    let isActive = false
    
    if (input) {
        input.addEventListener('focus', () => {
            isActive = true
            suggestion.classList.remove('hidden')
            input.classList.add('rounded-b-none')
            searchBarBox.classList.add('rounded-b-none')
            if (isActive) {
                taskList.forEach((task: string) => {
                    const listItem = document.createElement('li')
                    listItem.classList.add('hover:bg-gray-100', 'hover:opacity-80', 'p-1')
                    listItem.textContent = task
                    suggestionList.appendChild(listItem)
                })
            }
        })
        input.addEventListener('blur', () => {
            isActive = false
            suggestion.classList.add('hidden')
            input.classList.remove('rounded-b-none')
            searchBarBox.classList.remove('rounded-b-none')
        })
    }

    // ----------------------- dynamic suggestion change based on the keyword ------------------------

    const taskList = ['wash dish', 'go to school', 'prepare lunch', 'sing a song', 'write a letter', 'walk dog', 'wash car', 'take a nap', 'read a book', 'watch a movie', 'drink water', 'open a SNS', 'make an app', 'go outside', 'push up', 'running', 'do something good']

    input.addEventListener('input', (e) => {
        const target = e.currentTarget as HTMLInputElement
        const keywords = target.value.replace(/\s+/g, '').toLowerCase().split('')
        suggestionList.innerHTML = ''

        input.classList.add('rounded-b-none')
        searchBarBox.classList.add('rounded-b-none')

        if (keywords.length === 0) {
            suggestionList.innerHTML = ''
        }
        
        let taskFound = taskList.filter(task => {
            const taskChars = task.replace(/\s+/g, '').toLowerCase().split('')
            return keywords.every(char => {
                const index = taskChars.indexOf(char)
                if (index !== -1) {
                    taskChars.splice(index, 1)
                    return true
                } else {
                    return false
                }
            })
        })

        if (taskFound.length > 0) {
            taskFound.forEach((task: string) => {
                const listItem = document.createElement('li')
                listItem.classList.add('hover:bg-gray-100', 'hover:opacity-80', 'p-1', 'cursor-pointer')
                listItem.textContent = task
                suggestionList.appendChild(listItem)
            })
        } else {
            const listItem = document.createElement('li')
            listItem.classList.add('p-1')
            listItem.textContent = 'No results found'
            suggestionList.appendChild(listItem)
        }

        // ------------------------------- open modal function -----------------------------------

        const taskForModal = document.querySelectorAll('.suggestion ul li') as NodeListOf<HTMLLIElement>
        console.log(taskForModal)
        
        taskForModal.forEach((task) => {
            const modalClose = document.createElement('div')
            const closeIcon = document.createElementNS('http://www.w3.org/2000/svg', 'svg')
            const iconPath = document.createElementNS('http://www.w3.org/2000/svg', 'path')

            iconPath.setAttribute('d', 'M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z')

            closeIcon.setAttribute('xmlns', 'http://www.w3.org/2000/svg')
            closeIcon.setAttribute('viewBox', '0 0 384 512')
            closeIcon.appendChild(iconPath)
            modalClose.appendChild(closeIcon)

            task.addEventListener('click', () => {
                console.log('button clicked')

                const overlay = document.createElement('div')
                const modalContainer = document.createElement('div')
                const modalLeft = document.createElement('div')
                const modalRight = document.createElement('div')
                const modalTitle = document.createElement('div')
                const modalDesc = document.createElement('p')
                const modalAssigned = document.createElement('div')
                
                overlay.classList.add('overlay', 'w-screen', 'h-screen', 'fixed', 'top-0', 'left-0', 'flex', 'justify-center', 'items-center', 'bg-black', 'opacity-70')
                modalContainer.classList.add('modal-container', 'w-[80vw]', 'h-[80vh]', 'flex')
                modalLeft.classList.add('modal-left', 'w-full')
                modalRight.classList.add('modal-right', 'w-full')

                modalTitle.innerHTML = `<h1>${task.textContent}</h1>`
                modalDesc.textContent = 'this is a sample task description.'
                modalAssigned.textContent = 'John Doe'

                modalLeft.appendChild(modalTitle)
                modalLeft.appendChild(modalDesc)
                modalRight.appendChild(modalAssigned)
                modalContainer.appendChild(modalLeft)
                modalContainer.appendChild(modalRight)
                modalContainer.appendChild(modalClose)
                overlay.appendChild(modalContainer)

                document.body.appendChild(overlay)
            })

            modalClose.addEventListener('click', () => {
                const overlay = document.querySelector('.overlay') as HTMLDivElement
                if(overlay) {
                    overlay.remove()
                }
            })

        })
    })

    

    
</script>